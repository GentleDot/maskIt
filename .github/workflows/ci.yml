name: library CI
on:
    pull_request:
        branches:
            - main
    push:
        branches:
            - main

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up JDK 1.8
                uses: actions/setup-java@v4
                with:
                    java-version: '8'
                    distribution: 'temurin'

            -   name: Permission denied solve
                run: chmod +x ./maskit/gradlew

            -   name: Run tests
                run: cd maskit && ./gradlew clean test

    publish:
        runs-on: ubuntu-latest
        needs: test
        if: github.ref == 'refs/heads/main'

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up JDK 1.8
                uses: actions/setup-java@v4
                with:
                    java-version: '8'
                    distribution: 'temurin'


            -   name: Get version from build.gradle
                id: get_version
                run: |
                    VERSION=$(grep -Eo "projectVersion = '[^']+'" ./maskit/build.gradle | awk -F"'" '{print $2}')
                    echo "Version extracted: $VERSION"
                    echo "::set-output name=version::$VERSION"

            -   name: Set up Git automate user
                run: |
                    git config --global user.email "action@github.com"
                    git config --global user.name "GitHub Action"

            -   name: Check if tag exists
                id: check_tag
                run: |
                    if git ls-remote --tags origin | grep -q "${{ steps.get_version.outputs.version }}"; then
                      echo "Tag already exists"
                      echo "exists=true" >> $GITHUB_ENV
                    else
                      echo "Tag does not exist"
                      echo "exists=false" >> $GITHUB_ENV
                    fi

            -   name: Create Git Tag
                if: env.exists == 'false'  # 태그가 존재하지 않을 때만 실행
                run: |
                    TAG_NAME="${{ steps.get_version.outputs.version }}"
                    git tag -a "$TAG_NAME" -m "Release version $TAG_NAME"
                    git push origin "$TAG_NAME"
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: Read release notes
                id: read_release_notes
                run: |
                    TAG_NAME=${{ steps.get_version.outputs.version }}
                    RELEASE_DATE=$(date +'%Y-%m-%d %H:%M:%S')
                    
                    cat updates/${TAG_NAME}.md > release_notes.txt
                    echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
                    echo -e "\n" >> release_notes.txt
                    echo "릴리스 버전: ${TAG_NAME} (UTC)" >> release_notes.txt
                    echo "릴리스 일시: ${RELEASE_DATE}" >> release_notes.txt
                    cat release_notes.txt >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV

            -   name: Create a GitHub Release
                uses: softprops/action-gh-release@v1
                with:
                    tag_name: ${{ steps.get_version.outputs.version }}
                    release_name: Release  ${{ steps.get_version.outputs.version }}
                    body: ${{ env.RELEASE_NOTES }}
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: Permission denied solve
                run: chmod +x ./maskit/gradlew

            -   name: Build with Gradle
                run: cd maskit && ./gradlew build -x test

            -   name: Publish to local Maven repository
                run: cd maskit && ./gradlew publishToMavenLocal
